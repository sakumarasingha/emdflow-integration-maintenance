{
    "definition": {
        "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
        "actions": {
            "Result": {
                "actions": {
                    "Error_Message": {
                        "inputs": {
                            "code": "var errors = workflowContext.actions.Filter_array.outputs;\r\nvar error = errors.body[0];\r\nvar statusCode = errors.code;\r\nvar errorMsg;\r\n\r\nif(error.hasOwnProperty('outputs')){\r\n    statusCode = error.outputs.statusCode;\r\n    if (error.outputs.hasOwnProperty('body'))\r\n    {\r\n        errorMsg = error.outputs.body.message;\r\n    }\r\n}\r\nelse if(error.hasOwnProperty('error')){\r\n    statusCode = error.error.code;\r\n    errorMsg = error.error.message;\r\n}\r\n\r\nvar result = {\r\n    \"statusCode\":statusCode,\r\n    \"message\": errorMsg\r\n};\r\n\r\nreturn result;"
                        },
                        "runAfter": {
                            "Filter_array": [
                                "SUCCEEDED"
                            ]
                        },
                        "trackedProperties": {
                            "error_message": "@{outputs('Error_Message')?['message']}",
                            "la_failed": true,
                            "status_code": "@{outputs('Error_Message')?['statusCode']}"
                        },
                        "type": "JavaScriptCode"
                    },
                    "Filter_array": {
                        "inputs": {
                            "from": "@result('Scope')",
                            "where": "@equals(item()?['status'],'Failed')"
                        },
                        "type": "Query"
                    },
                    "Terminate": {
                        "inputs": {
                            "runStatus": "Failed"
                        },
                        "runAfter": {
                            "Error_Message": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Terminate"
                    }
                },
                "runAfter": {
                    "Scope": [
                        "TIMEDOUT",
                        "SKIPPED",
                        "FAILED"
                    ]
                },
                "type": "Scope"
            },
            "Scope": {
                "actions": {
                    "Complete_the_message": {
                        "inputs": {
                            "parameters": {
                                "messageId": "@triggerBody()?['messageId']"
                            },
                            "serviceProviderConfiguration": {
                                "connectionName": "serviceBus",
                                "operationId": "completeMessage",
                                "serviceProviderId": "/serviceProviders/serviceBus"
                            }
                        },
                        "runAfter": {
                            "Send_Email": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "ServiceProvider"
                    },
                    "Email_Body": {
                        "inputs": "@body('Transform_Email_Body')",
                        "runAfter": {
                            "Transform_Email_Body": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Compose"
                    },
                    "Modify_Event": {
                        "inputs": {
                            "code": "var payload = workflowContext.actions.SB_Message.outputs;\r\npayload.data.EXP = convertEpochToUTC(payload.data.EXP);\r\npayload.data.expLocal = convertToLocalTime(payload.data.EXP);\r\nreturn payload;\r\n\r\nfunction convertEpochToUTC(epochTime) {\r\n    const date = new Date(epochTime * 1000); \r\n    return date;// date.toUTCString(); // Convert to UTC string format\r\n}\r\n\r\nfunction convertToLocalTime(endDateTime) {\r\n  const timeZone = 'Australia/Melbourne';\r\n  const utcDate = new Date(endDateTime);\r\n  let localTime =  utcDate.toLocaleString(\"en-AU\", {\r\n                    timeZone: timeZone\r\n                });\r\n  return localTime;\r\n}"
                        },
                        "runAfter": {
                            "SB_Message": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "JavaScriptCode"
                    },
                    "SB_Message": {
                        "inputs": "@triggerBody()?['contentData']",
                        "type": "Compose"
                    },
                    "Send_Email": {
                        "inputs": {
                            "body": {
                                "email_body": "@outputs('Email_Body')",
                                "email_subject": "Azure | Resource Expiry | Incident | High -@{toUpper(parameters('emailEnvironment'))}",
                                "email_to": "@array(split(parameters('emailTo'),','))"
                            },
                            "host": {
                                "workflow": {
                                    "id": "EmailNotification"
                                }
                            }
                        },
                        "runAfter": {
                            "Email_Body": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Workflow"
                    },
                    "Transform_Email_Body": {
                        "inputs": {
                            "content": {
                                "event": "@outputs('Modify_Event')"
                            },
                            "map": {
                                "name": "kv-expiry-email-template.liquid",
                                "source": "LogicApp"
                            }
                        },
                        "kind": "JsonToText",
                        "runAfter": {
                            "Modify_Event": [
                                "SUCCEEDED"
                            ]
                        },
                        "type": "Liquid"
                    }
                },
                "runAfter": {},
                "type": "Scope"
            }
        },
        "contentVersion": "1.0.0.0",
        "outputs": {},
        "triggers": {
            "When_messages_are_available_in_a_queue_(peek-lock)": {
                "inputs": {
                    "parameters": {
                        "isSessionsEnabled": false,
                        "queueName": "sbq-keyvault-events"
                    },
                    "serviceProviderConfiguration": {
                        "connectionName": "serviceBus",
                        "operationId": "peekLockQueueMessages",
                        "serviceProviderId": "/serviceProviders/serviceBus"
                    }
                },
                "splitOn": "@triggerOutputs()?['body']",
                "type": "ServiceProvider"
            }
        }
    },
    "kind": "Stateful"
}